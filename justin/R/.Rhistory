setwd("~/git/metabolomics_tools/justin/R")
library(xcms)
library(Hmisc)
require('gtools')
input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_POS.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_NEG.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_POS.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_NEG.mzXML'
# construct the output filenames
prefix <- basename(input_file) # get the filename only
prefix <- sub("^([^.]*).*", "\\1", prefix) # get rid of the extension
fragments_out <- paste(c(prefix, '_fragments.csv'), collapse="")
losses_out <- paste(c(prefix, '_losses.csv'), collapse="")
mzdiffs_out <- paste(c(prefix, '_mzdiffs.csv'), collapse="")
ms1_peaklist <- paste(c(prefix, '_ms1.csv'), collapse="")
ms2_peaklist <- paste(c(prefix, '_ms2.csv'), collapse="")
################################
## Read in data and get peaks ##
################################
# do peak detection using CentWave
xset <- xcmsSet(files=input_file, method="centWave", ppm=2, snthresh=3, peakwidth=c(5,100),
prefilter=c(3,1000), mzdiff=0.001, integrate=0, fitgauss=FALSE, verbose.column=TRUE)
xset <- group(xset)
# load Tony Larson's script
source('xcmsSetFragments.R')
frags <- xcmsSetFragments(xset, cdf.corrected = FALSE, min.rel.int=0.01, max.frags = 5000,
msnSelect=c("precursor_int"), specFilter=c("specPeaks"), match.ppm=7,
sn=3, mzgap=0.005, min.r=0.75, min.diff=10)
peaks <- as.data.frame(frags@peaks)
##########################
##### Data filtering #####
##########################
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
# save the filtered peaklists out too
write.table(ms1, file=ms1_peaklist, col.names=NA, row.names=T, sep=",")
write.table(ms2, file=ms2_peaklist, col.names=NA, row.names=T, sep=",")
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, fragments_out, losses_out, mzdiffs_out)
print ms2
ms2
ms2.names
ms1.names
ms1
ms1$peakID
# create empty data.frame
ms2_df <- data.frame(t(rep(NA,length(ms1$peakID))))
# get peak ids then remove from matrix
ms1.names <- as.character(ms1$peakID)
ms2_df <- ms2_df[-1,]
# find fragments that are within 7ppm of each other. Assume same fragment.
copy_ms2 <- ms2
while(nrow(copy_ms2) > 0) {
print(paste(c("remaining=", nrow(copy_ms2)), collapse=""))
# get first mz value
mz <- copy_ms2$mz[1]
# calculate mz window
max.ppm <- mz * 7 * 1e-06
# find peaks within that window
match.idx <- which(sapply(copy_ms2$mz, function(x) {
abs(mz - x) < max.ppm
}))
# calculate mean mz as label for ms2 row
mean.mz <- round(mean(copy_ms2$mz[match.idx]), digits=5)
# get intensities
intensities <- copy_ms2$intensity[match.idx]
# get parent id
parent.id <- copy_ms2$MSnParentPeakID[match.idx]
# find parent id in data.frame and add ms2 fragments
parent.idx <- match(as.character(parent.id), ms1.names)
row <- rep(NA, nrow(ms1))
row[parent.idx] <- intensities
ms2_df <- rbind(ms2_df, row)
rownames(ms2_df)[nrow(ms2_df)] <- paste(c("fragment_", mean.mz), collapse="")
# remove fragments from ms2 list and start loop again with next fragment
copy_ms2 <- copy_ms2[-match.idx,]
}
# add ms1 label in format mz_rt
names(ms2_df) <- paste(as.character(round(ms1$mz, digits=5)), as.character(ms1$rt), sep="_")
# sort in a natural order
ms2_df <- ms2_df[mixedsort(row.names(ms2_df)),]
ms2.names
ms1.names
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
ms2.names
ms2
ms2_df <- data.frame(t(rep(NA,length(ms1$peakID))))
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
ms2_df <- ms2_df[-1,] # remove first column
# find fragments that are within 7ppm of each other. Assume same fragment.
copy_ms2 <- ms2
print(paste(c("remaining=", nrow(copy_ms2)), collapse=""))
mz <- copy_ms2$mz[1]
mz
# calculate mz window
max.ppm <- mz * 7 * 1e-06
# find peaks within that window
match.idx <- which(sapply(copy_ms2$mz, function(x) {
abs(mz - x) < max.ppm
}))
# calculate mean mz as label for ms2 row
mean.mz <- round(mean(copy_ms2$mz[match.idx]), digits=5)
intensities <- copy_ms2$intensity[match.idx]
# get parent id
parent.id <- copy_ms2$MSnParentPeakID[match.idx]
mean.mz
ms2
options(max.print=10)
ms2
options(max.print=100)
ms2
options(max.print=30)
ms2
peakids <- copy_ms2$peakID[match.idx]
peakids
matching_peakids <- match(as.character(peakids), ms2.names)
matching_peakids
matching_pos <- match(as.character(peakids), ms2.names)
ms2[matching_pos]
ms2[matching_pos, ]
peakids
intensities
ms2_pos <- match(as.character(peakids), ms2.names)
ms2[matching_pos, "bin_id"] <- mean.mz
ms2[matching_pos, ]
ms2
ms2[matching_pos, "bin_id"] <- mean.mz
ms2[matching_pos, "bin_id"] <- as.character(mean.mz)
ms2[matching_pos, ]
library(xcms)
library(Hmisc)
require('gtools')
input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_POS.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_NEG.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_POS.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_NEG.mzXML'
# construct the output filenames
prefix <- basename(input_file) # get the filename only
prefix <- sub("^([^.]*).*", "\\1", prefix) # get rid of the extension
fragments_out <- paste(c(prefix, '_fragments.csv'), collapse="")
losses_out <- paste(c(prefix, '_losses.csv'), collapse="")
mzdiffs_out <- paste(c(prefix, '_mzdiffs.csv'), collapse="")
ms1_peaklist <- paste(c(prefix, '_ms1.csv'), collapse="")
ms2_peaklist <- paste(c(prefix, '_ms2.csv'), collapse="")
################################
## Read in data and get peaks ##
################################
# do peak detection using CentWave
xset <- xcmsSet(files=input_file, method="centWave", ppm=2, snthresh=3, peakwidth=c(5,100),
prefilter=c(3,1000), mzdiff=0.001, integrate=0, fitgauss=FALSE, verbose.column=TRUE)
xset <- group(xset)
# load Tony Larson's script
source('xcmsSetFragments.R')
frags <- xcmsSetFragments(xset, cdf.corrected = FALSE, min.rel.int=0.01, max.frags = 5000,
msnSelect=c("precursor_int"), specFilter=c("specPeaks"), match.ppm=7,
sn=3, mzgap=0.005, min.r=0.75, min.diff=10)
peaks <- as.data.frame(frags@peaks)
##########################
##### Data filtering #####
##########################
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, ms1_peaklist, ms2_peaklist,
fragments_out, losses_out, mzdiffs_out)
ms1
paste('a', 'b', 'c')
paste('a', 'b', 'c', sep="")
# create empty data.frame
ms2_df <- data.frame(t(rep(NA,length(ms1$peakID))))
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
ms2_df <- ms2_df[-1,] # remove first column
# find fragments that are within 7ppm of each other. Assume same fragment.
copy_ms2 <- ms2
########################################
##### MS1/MS2 Dataframe Generation #####
########################################
print("Constructing MS1/MS2 dataframe")
# create empty data.frame
ms2_df <- data.frame(t(rep(NA,length(ms1$peakID))))
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
ms2_df <- ms2_df[-1,] # remove first column
# find fragments that are within 7ppm of each other. Assume same fragment.
copy_ms2 <- ms2
while(nrow(copy_ms2) > 0) {
print(paste(c("remaining=", nrow(copy_ms2)), collapse=""))
# get first mz value
mz <- copy_ms2$mz[1]
# calculate mz window
max.ppm <- mz * 7 * 1e-06
# find peaks within that window
match.idx <- which(sapply(copy_ms2$mz, function(x) {
abs(mz - x) < max.ppm
}))
# calculate mean mz as label for ms2 row
mean.mz <- round(mean(copy_ms2$mz[match.idx]), digits=5)
# store the mean mz (bin id) into the original ms2 dataframe too
peakids <- copy_ms2$peakID[match.idx]
matching_pos <- match(as.character(peakids), ms2.names)
ms2[matching_pos, "bin_id"] <- as.character(mean.mz)
# get intensities
intensities <- copy_ms2$intensity[match.idx]
# get parent id
parent.id <- copy_ms2$MSnParentPeakID[match.idx]
# find parent id in data.frame and add ms2 fragments
parent.idx <- match(as.character(parent.id), ms1.names)
row <- rep(NA, nrow(ms1))
row[parent.idx] <- intensities
ms2_df <- rbind(ms2_df, row)
rownames(ms2_df)[nrow(ms2_df)] <- paste(c("fragment_", mean.mz), collapse="")
# remove fragments from ms2 list and start loop again with next fragment
copy_ms2 <- copy_ms2[-match.idx,]
}
# add ms1 label in format mz_rt
names(ms2_df) <- paste(as.character(ms1$peakID),
as.character(round(ms1$mz, digits=5)),
as.character(ms1$rt),
sep="_")
# sort in a natural order
ms2_df <- ms2_df[mixedsort(row.names(ms2_df)),]
# construct the output filenames
prefix <- basename(input_file) # get the filename only
prefix <- sub("^([^.]*).*", "\\1", prefix) # get rid of the extension
fragments_out <- paste(c(prefix, '_fragments.csv'), collapse="")
losses_out <- paste(c(prefix, '_losses.csv'), collapse="")
mzdiffs_out <- paste(c(prefix, '_mzdiffs.csv'), collapse="")
ms1_out <- paste(c(prefix, '_ms1.csv'), collapse="")
ms2_out <- paste(c(prefix, '_ms2.csv'), collapse="")
write.table(ms1, file=ms1_out, col.names=NA, row.names=T, sep=",")
write.table(ms2, file=ms2_out, col.names=NA, row.names=T, sep=",")
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, ms1_peaklist, ms2_peaklist,
fragments_out, losses_out, mzdiffs_out)
##########################
##### Data filtering #####
##########################
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, ms1_peaklist, ms2_peaklist,
fragments_out, losses_out, mzdiffs_out)
##########################
##### Data filtering #####
##########################
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, ms1_peaklist, ms2_peaklist,
fragments_out, losses_out, mzdiffs_out)
library(xcms)
library(Hmisc)
require('gtools')
# input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_POS.mzXML'
input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_NEG.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_POS.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_NEG.mzXML'
# construct the output filenames
prefix <- basename(input_file) # get the filename only
prefix <- sub("^([^.]*).*", "\\1", prefix) # get rid of the extension
fragments_out <- paste(c(prefix, '_fragments.csv'), collapse="")
losses_out <- paste(c(prefix, '_losses.csv'), collapse="")
mzdiffs_out <- paste(c(prefix, '_mzdiffs.csv'), collapse="")
ms1_out <- paste(c(prefix, '_ms1.csv'), collapse="")
ms2_out <- paste(c(prefix, '_ms2.csv'), collapse="")
################################
## Read in data and get peaks ##
################################
# do peak detection using CentWave
xset <- xcmsSet(files=input_file, method="centWave", ppm=2, snthresh=3, peakwidth=c(5,100),
prefilter=c(3,1000), mzdiff=0.001, integrate=0, fitgauss=FALSE, verbose.column=TRUE)
xset <- group(xset)
# load Tony Larson's script
source('xcmsSetFragments.R')
frags <- xcmsSetFragments(xset, cdf.corrected = FALSE, min.rel.int=0.01, max.frags = 5000,
msnSelect=c("precursor_int"), specFilter=c("specPeaks"), match.ppm=7,
sn=3, mzgap=0.005, min.r=0.75, min.diff=10)
peaks <- as.data.frame(frags@peaks)
##########################
##### Data filtering #####
##########################
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, ms1_peaklist, ms2_peaklist,
fragments_out, losses_out, mzdiffs_out)
##########################
##### Data filtering #####
##########################
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, ms1_out, ms2_out,
fragments_out, losses_out, mzdiffs_out)
# construct the output filenames
library(xcms)
library(Hmisc)
require('gtools')
# input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_POS.mzXML'
input_file <- '/home/joewandy/Project/justin_data/Beer_3_T10_NEG.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_POS.mzXML'
# input_file <- '/home/joewandy/Project/justin_data/Urine_37_Top10_NEG.mzXML'
# construct the output filenames
prefix <- basename(input_file) # get the filename only
prefix <- sub("^([^.]*).*", "\\1", prefix) # get rid of the extension
fragments_out <- paste(c(prefix, '_fragments.csv'), collapse="")
losses_out <- paste(c(prefix, '_losses.csv'), collapse="")
mzdiffs_out <- paste(c(prefix, '_mzdiffs.csv'), collapse="")
ms1_out <- paste(c(prefix, '_ms1.csv'), collapse="")
ms2_out <- paste(c(prefix, '_ms2.csv'), collapse="")
################################
## Read in data and get peaks ##
################################
# do peak detection using CentWave
xset <- xcmsSet(files=input_file, method="centWave", ppm=2, snthresh=3, peakwidth=c(5,100),
prefilter=c(3,1000), mzdiff=0.001, integrate=0, fitgauss=FALSE, verbose.column=TRUE)
xset <- group(xset)
# load Tony Larson's script
source('xcmsSetFragments.R')
frags <- xcmsSetFragments(xset, cdf.corrected = FALSE, min.rel.int=0.01, max.frags = 5000,
msnSelect=c("precursor_int"), specFilter=c("specPeaks"), match.ppm=7,
sn=3, mzgap=0.005, min.r=0.75, min.diff=10)
peaks <- as.data.frame(frags@peaks)
##########################
##### Data filtering #####
##########################
### MS1 ###
# get ms1 peaks
ms1 <- peaks[which(peaks$msLevel==1),]
# keep peaks with RT > 3 mins and < 21 mins
ms1 <- ms1[which(ms1$rt >= 3*60),]
ms1 <- ms1[which(ms1$rt <= 21*60),]
### MS2 ###
# get ms2 peaks
ms2 <- peaks[which(peaks$msLevel==2),]
# keep ms2 peaks with intensity > 5000
ms2 <- ms2[which(ms2$intensity>5000),]
# keep ms2 peaks with parent in filtered ms1 list
ms2 <- ms2[which(ms2$MSnParentPeakID %in% ms1$peakID),]
# make sure only ms1 peaks with ms2 fragments are kept
ms1 <- ms1[which(ms1$peakID %in% ms2$MSnParentPeakID),]
### Prepare the matrices for LDA ###
source('extractFeatures.R')
extract_features(ms1, ms2, ms1_out, ms2_out,
fragments_out, losses_out, mzdiffs_out)
