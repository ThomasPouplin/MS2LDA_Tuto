mvrnorm
require(MASS)
mu <- rep(0, 2)
sigma <- matrix(c(10,3,3,2),2,2)
mvrnorm(n=10, mu, sigma)
mu <- rep(0, 4)
sigma <- matrix(c(1, 1, 1, 1, 1, 1, 1, 1), 4, 4)
mvrnorm(n=10, mu, sigma)
runif(10)
runif(10, 10)
nrow <- 10
ncol <- 6
runif(nrow, ncol)
runif(nrow*ncol)
str(runif(nrow*ncol))
matrix(runif(nrow*ncol), nrow, ncol)
?matrix
rest <- matrix(runif(nrow*ncol), nrow, ncol)
pattern <- mvrnorm(n=10, mu, sigma)
pattern
rest
cbind(pattern, rest)
combined <- cbind(pattern, rest)
heatmap(combined)
mu <- rep(5, 4)
sigma <- matrix(c(1, 1, 1, 1, 1, 1, 1, 1), 4, 4)
pattern2 <- mvrnorm(n=10, mu, sigma)
rest2 <- matrix(runif(nrow*ncol), nrow, ncol)
combined2 <- cbind(pattern2, rest2)
all <- rbind(combined, combined2)
heatmap(all)
mypca <- prcomp(all)
print(mypca)
plot(mycpa, type="1!")
plot(mycpa, type="1")
plot(mypca, type="1")
mypca <- prcomp(all)su
summary(mypca)
> screeplot(wine.pca, type="lines")
screeplot(mypca, type="lines")
require(MASS)
?mvrnorm
mu1 <- rep(0, 4)
sigma1 <- matrix(rep(1, 16), 4, 4)
mu1
sigma1
mvrnorm(10, mu1, sigma1)
sigma1 <- matrix(rep(10, 16), 4, 4)
mvrnorm(10, mu1, sigma1)
sigma1 <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), 4, 4)
mvrnorm(10, mu1, sigma1)
seq(1, 16)
seq(1, 16, by=2)
sigma1 <- seq(1, 16)
mvrnorm(10, mu1, sigma1)
sigma1 <- matrix(seq(1, 16), 4, 4)
mvrnorm(10, mu1, sigma1)
mvrnorm(10, mu1, sigma1)
data1 <- mvrnorm(10, mu1, sigma1)
runif
matrix(runif(10*6), 10, 6)
noise1 <- matrix(runif(10*6), 10, 6)
cbind(data1, noise1)
group1 <- cbind(data1, noise1)
sigma2 <- matrix(seq(1, 32, by=2), 4, 4)
data2 <- mvrnorm(10, mu1, sigma1)
noise2 <- matrix(runif(10*6), 10, 6)
group2 <- cbind(data2, noise2)
groups <- rbind(group1, group2)
heatmap(groups)
library(car)
library("car")
install.packages(car)
install.packages("car")
library(car)
scatterplotMatrix(groups)
groups
plot(groups[, 1], groups[, 2])
scatterplotMatrix(groups)
plot(groups[, 1], groups[, 2])
scatterplotMatrix(groups)
plot(groups[, 1], groups[, 3])
scale(groups)
sgroups <- scale(groups)
heatmap(sgroups)
heatmap(groups)
heatmap(sgroups)
sapply(sgroups, mean)
sgroups <- as.data.frame(scale(groups))
sgroups
sgroups$V1
sapply(sgroups, mean)
sapply(sgroups, sd)
pca <- prcomp(sgroups)
summary(pca)
pca$sdev
sum((pca$sdev)^2)
screeplot(pca)
?screeplot
screeplot(pca, type="lines")
pca$sdev^2
(pca$sdev)^2
pca$rotation
pca$rotation[, 1]
sum(pca$rotation[, 1]^2)
pca$x
pca$x[, 1]
plot(pca$x[, 1], pca$[x, 2])
plot(pca$x[, 1], pca$[x, 2])
pca$x[, 1]
pca$x[, 2]
pca$x[, 2]
pc1 <- pca$x[, 1]
pc2 <- pca$x[, 2]
plot(pc1, pc2)
text(pc1, pc2, groups$V1, cex=0.7, pos=4, col="red")
groups
text(pc1, pc2, sgroups$V1, cex=0.7, pos=4, col="red")
setwd("~/git/metabolomics_tools/justin/R")
query_features <- function(ms1, ms2, masses, intensities, mass_tol, intensity_tol) {
ind <- order(intensities, decreasing=T)
intensities <- intensities[ind]
masses <- masses[ind]
# find the first set of candidate answers with intensity 1.0
i <- 1
mz <- masses[i]
max.ppm <- mz * mass_tol * 1e-06
match.idx <- which(sapply(ms2$mz, function(x) {
abs(mz - x) < max.ppm
}))
first_col <- ms2[match.idx, ]
results_ids <- data.frame(first_col$peakID)
row.names(results_ids) <- first_col$MSnParentPeakID
# successively merge the next mass values to query
from <- 2
to <- length(masses)
for (i in from:to) {
# find peaks within the next mass tolerance
mz <- masses[i]
max.ppm <- mz * mass_tol * 1e-06
match.idx <- which(sapply(ms2$mz, function(x) {
abs(mz - x) < max.ppm
}))
temp_col <- ms2[match.idx, ]
temp_res <- data.frame(temp_col$peakID)
row.names(temp_res) <- temp_col$MSnParentPeakID
# merge to the results so far
results_ids <- merge(results_ids, temp_res, by="row.names")
row.names(results_ids) <- results_ids[, 1]
results_ids[1] <- NULL
}
colnames(results_ids) <- masses
results_ids <- results_ids[ order(row.names(results_ids)), ]
# check rows where the intensity ratios do not match the pattern we specified
f <- function(x) {
matching_pos <- match(x, ms2$peakID)
matching_fragments <- ms2[matching_pos, ]
matching_intensities <- matching_fragments$intensity
first_intensity <- matching_intensities[1]
# normalise
matching_intensities <- matching_intensities/first_intensity
# check intensities are within tolerance
check_intensities <- abs(matching_intensities-intensities) < intensity_tol
# row is okay if all intensities values are satisfied
row_ok <- sum(check_intensities)==length(intensities)
}
# check every row in results_ids to see if it satisfies the intensity pattern wanted
intensity_checked <- as.logical(apply(results_ids, 1, f))
results_ids <- results_ids[intensity_checked, ]
colnames(results_ids) <- masses
return(results_ids)
}
print_features <- function(ms1, ms2, results_ids) {
for(i in 1:nrow(results_ids)) {
row <- results_ids[i, ]
# find the ms1 peak
parentID <- row.names(row)
matching_pos <- match(parentID, ms1$peakID)
parent <- ms1[matching_pos, ]
writeLines("Parent peak")
print(parent[, c("peakID", "mz", "rt", "intensity")], row.names=FALSE)
# find the ms2 peaks
fragmentIDs <- as.numeric(row)
matching_pos <- match(fragmentIDs, ms2$peakID)
fragments <- ms2[matching_pos, ]
writeLines("Fragment peaks")
print(fragments[, c("peakID", "mz", "rt", "intensity")], row.names=FALSE)
writeLines("")
}
}
ms1 <- read.csv('/home/joewandy/git/metabolomics_tools/justin/input/Beer_3_T10_POS_ms1.csv', row.names=1)
ms2 <- read.csv('/home/joewandy/git/metabolomics_tools/justin/input/Beer_3_T10_POS_ms2.csv', row.names=1)
masses <- c(103.054482, 121.064891, 93.069812, 95.049358)
intensities <- c(100216.476562, 645368.187500, 94983.171875, 13858.294922)
intensities <- intensities / max(intensities)
# specify the allowed mass difference in parts-per-million
mass_tol <- 5
# specify the allowed intensity difference in the ratio
intensity_tol <- 0.05
results_ids <- query_features(ms1, ms2, masses, intensities, mass_tol, intensity_tol)
print_features(ms1, ms2, results_ids)
source('queryFeatures.R')
source('queryFeatures.R')
