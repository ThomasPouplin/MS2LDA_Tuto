setwd("~/git/metabolomics_tools/justin")
setwd("~/git/metabolomics_tools/justin/R")
load("~/git/metabolomics_tools/justin/R/.RData")
prev_words_file <- '/home/joewandy/git/metabolomics_tools/justin/input/test.selected.words'
print("Constructing MS1/MS2 dataframe")
# for existing words
existing_fragment_df <- data.frame(t(rep(NA,length(ms1$peakID))))
existing_fragment_df <- existing_fragment_df[-1,] # remove first column
# for new words
new_fragment_df <- data.frame(t(rep(NA,length(ms1$peakID))))
new_fragment_df <- new_fragment_df[-1,] # remove first column
print("Constructing MS1/MS2 dataframe")
# create an empty dataframe for existing words
existing_fragment_df <- data.frame(t(rep(NA,length(ms1$peakID))))
existing_fragment_df <- existing_fragment_df[-1,] # remove first column
# create an empty dataframe for new words
new_fragment_df <- data.frame(t(rep(NA,length(ms1$peakID))))
new_fragment_df <- new_fragment_df[-1,] # remove first column
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
# reuse existing words, if any
copy_ms2 <- ms2
prev_fragment_df <- read.csv(prev_words_file, header=F)
prev_words_df <- read.csv(prev_words_file, header=F)
prev_words_df
prev_words <- prev_words_df[1]
prev_words
prev_words %like% 'fragment'
like(prev_words, 'fragment')
prev_words.like
prev_words.like()
grep('fragment', prev_words)
grep('fragment', prev_words, )
grep('fragment', prev_words[:, 1])
grep('fragment', prev_words)
prev_words[grep('fragment', prev_words), ]
prev_words
v <- vector(prev_words)
grepl
prev_words
with(prev_words, grepl("fragment", 1))
with(prev_words, grepl("fragment", V1))
pos <-with(prev_words, grepl("fragment", V1))
prev_words[pos]
prev_words[pos, ]
prev_words[1, ]
prev_words_df <- read.csv(prev_words_file, header=F)
prev_words <- prev_words_df[1]
pos <-with(prev_words, grepl("fragment", V1))
prev_words <- prev_words[pos]
tokens <- strsplit(prev_words, '_')
tokens
prev_mzs <- sapply(tokens, '[', 2)
prev_mzs
prev_words_df <- read.csv(prev_words_file, header=F)
prev_words <- prev_words_df[1]
pos <-with(prev_words, grepl("fragment", V1))
prev_words <- prev_words[pos]
tokens <- strsplit(prev_words, '_')
prev_words_df <- read.csv(prev_words_file, header=F)
prev_words <- prev_words_df[1]
pos <-with(prev_words, grepl("fragment", V1))
prev_words <- prev_words[pos]
prev_words_df <- read.csv(prev_words_file, header=F)
prev_words <- prev_words_df[1]
pos <-with(prev_words, grepl("fragment", V1))
prev_words <- prev_words[pos, ]
tokens <- strsplit(prev_words, '_')
prev_words_df <- read.csv(prev_words_file, header=F)
prev_words <- prev_words_df[1]
pos <-with(prev_words, grepl("fragment", V1))
prev_words
?strsplit
prev_words <- as.vector(prev_words[1])
prev_words_df <- read.csv(prev_words_file, header=F)
prev_words_df
prev_words <- read.csv(prev_words_file, header=F)
pos <-with(prev_words, grepl("fragment", V1))
prev_words <- read.csv(prev_words_file, header=F)
pos <-with(prev_words, grepl("fragment", V1))
# select the rows containing 'fragment' and make it into a vector for strsplit
prev_words <- as.vector(prev_words[pos, 1])
tokens <- strsplit(prev_words, '_')
tokens
prev_mzs <- sapply(tokens, '[', 2)
prev_mzs <- as.numeric(prev_mzs)
prev_mzs_len <- length(prev_mzs)
prev_mzs
source('createPeakList.R')
results <- create_peaklist(peaks, use_relative_intensities)
ms1 <- results$ms1
ms2 <- results$ms2
source('extractFragmentFeatures.R')
results <- extract_ms2_fragment_df(ms1, ms2, prev_words_file)
ms2_masses <- ms2$mz
parent_ids <- ms2$MSnParentPeakID
matches <- match(as.character(parent_ids), ms1.names)
parent_masses <- ms1[matches, 5] # column 5 is the mz
losses <- parent_masses - ms2_masses
fragment_intensities <- ms2$intensity
fragment_peakids <- ms2$peakID
type(losses)
typeof(losses)
losses
print("Constructing neutral loss dataframe")
# create an empty dataframe
neutral_loss_df <- data.frame(t(rep(NA,length(ms1$peakID))))
neutral_loss_df <- neutral_loss_df[-1,] # remove first column
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
prev_words <- read.csv(prev_words_file, header=F)
pos <-with(prev_words, grepl("loss", V1))
# select the rows containing 'loss' and make it into a vector for strsplit
prev_words <- as.vector(prev_words[pos, 1])
# split by _
tokens <- strsplit(prev_words, '_')
tokens <- strsplit(prev_words, '_')
prev_mzs <- sapply(tokens, '[', 2)
prev_mzs <- as.numeric(prev_mzs)
prev_mzs
mtcars
dup <- matcars
dup <- mtcars
mtcars[1, 1] <- 999999
mtcars
dup
print("Constructing neutral loss dataframe")
# create an empty dataframe for existing words
existing_loss_df <- data.frame(t(rep(NA,length(ms1$peakID))))
existing_loss_df <- existing_loss_df[-1,] # remove first column
# create an empty dataframe for new words
new_loss_df <- data.frame(t(rep(NA,length(ms1$peakID))))
new_loss_df <- new_loss_df[-1,] # remove first column
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
# compute the difference between each fragment peak to its parent
ms2_masses <- ms2$mz
parent_ids <- ms2$MSnParentPeakID
matches <- match(as.character(parent_ids), ms1.names)
parent_masses <- ms1[matches, 5] # column 5 is the mz
losses <- parent_masses - ms2_masses
fragment_intensities <- ms2$intensity
fragment_peakids <- ms2$peakID
file.exists(prev_words_file)
prev_words <- read.csv(prev_words_file, header=F)
pos <-with(prev_words, grepl("loss", V1))
prev_words <- as.vector(prev_words[pos, 1])
tokens <- strsplit(prev_words, '_')
prev_mzs <- sapply(tokens, '[', 2)
prev_mzs <- as.numeric(prev_mzs)
prev_mzs_len <- length(prev_mzs)
prev_mzs
prev_mzs_len
print(paste(c("i=", i, "/", prev_mzs_len,
", remaining=", length(fragment_peakids)), collapse=""))
i <- 1
print(paste(c("i=", i, "/", prev_mzs_len,
", remaining=", length(fragment_peakids)), collapse=""))
mz <- prev_mzs[i]
# calculate mz window
max.ppm <- mz * 15 * 1e-06
match.idx <- which(sapply(losses, function(x) {
abs(mz - x) < max.ppm
}))
match.idx
mean.mz <- round(mz, digits=5)
mz
losses[match.idx]
intensities <- fragment_intensities[match.idx]
peakids <- fragment_peakids[match.idx]
parent.id <- parent_ids[match.idx]
parent.idx <- match(as.character(parent.id), ms1.names)
threshold_counts <- 5
threshold_max_loss <- 200
parent.idx
mean.mz
length(parent.idx) >= threshold_counts && mean.mz < threshold_max_loss
print(paste(c("remaining=", length(losses), " loss=", mean.mz, " matches=", length(match.idx)), collapse=""))
row <- rep(NA, nrow(ms1))
row[parent.idx] <- intensities
# add new row to existing loss dataframe
existing_loss_df <- rbind(existing_loss_df, row)
rownames(existing_loss_df)[nrow(existing_loss_df)] <- paste(c("loss_", mean.mz), collapse="") # the row name is the avg mz
View(existing_loss_df)
View(existing_loss_df)
# store the loss_bin_id in the original ms2 dataframe too
matching_pos <- match(as.character(peakids), ms2.names)
matching_pos
ms2[matching_pos, "loss_bin_id"] <- as.character(mean.mz)
ms2[659]
ms2[659, ]
length(losses)
# remove losses from the list to process
losses <- losses[-match.idx]
fragment_peakids <- fragment_peakids[-match.idx]
fragment_intensities <- fragment_intensities[-match.idx]
parent_ids <- parent_ids[-match.idx]
length(losses)
fragment_peakids <- fragment_peakids[-match.idx]
print("Constructing neutral loss dataframe")
# create an empty dataframe for existing words
existing_loss_df <- data.frame(t(rep(NA,length(ms1$peakID))))
existing_loss_df <- existing_loss_df[-1,] # remove first column
# create an empty dataframe for new words
new_loss_df <- data.frame(t(rep(NA,length(ms1$peakID))))
new_loss_df <- new_loss_df[-1,] # remove first column
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
# compute the difference between each fragment peak to its parent
ms2_masses <- ms2$mz
parent_ids <- ms2$MSnParentPeakID
matches <- match(as.character(parent_ids), ms1.names)
parent_masses <- ms1[matches, 5] # column 5 is the mz
losses <- parent_masses - ms2_masses
fragment_intensities <- ms2$intensity
fragment_peakids <- ms2$peakID
if (file.exists(prev_words_file)) {
# select the rows containing 'loss' and make it into a vector for strsplit
prev_words <- read.csv(prev_words_file, header=F)
pos <-with(prev_words, grepl("loss", V1))
prev_words <- as.vector(prev_words[pos, 1])
# split by _
tokens <- strsplit(prev_words, '_')
prev_mzs <- sapply(tokens, '[', 2)
prev_mzs <- as.numeric(prev_mzs)
prev_mzs_len <- length(prev_mzs)
for (i in 1:prev_mzs_len) {
print(paste(c("i=", i, "/", prev_mzs_len,
", remaining=", length(fragment_peakids)), collapse=""))
mz <- prev_mzs[i]
# calculate mz window
max.ppm <- mz * 15 * 1e-06
# find losses within that window
match.idx <- which(sapply(losses, function(x) {
abs(mz - x) < max.ppm
}))
# use the existing word as label for the rows
mean.mz <- round(mz, digits=5)
# if there's a match then use the actual fragment peaks
if (length(match.idx)>0) {
# find column of the parent peaks
intensities <- fragment_intensities[match.idx]
peakids <- fragment_peakids[match.idx]
parent.id <- parent_ids[match.idx]
parent.idx <- match(as.character(parent.id), ms1.names)
# append this new row to the data frame only if no. of parent.idx > threshold
threshold_counts <- 5
threshold_max_loss <- 200
if (length(parent.idx) >= threshold_counts && mean.mz < threshold_max_loss) {
print(paste(c("remaining=", length(losses), " loss=", mean.mz, " matches=", length(match.idx)), collapse=""))
row <- rep(NA, nrow(ms1))
row[parent.idx] <- intensities
# add new row to existing loss dataframe
existing_loss_df <- rbind(existing_loss_df, row)
rownames(existing_loss_df)[nrow(existing_loss_df)] <- paste(c("loss_", mean.mz), collapse="") # the row name is the avg mz
# store the loss_bin_id in the original ms2 dataframe too
matching_pos <- match(as.character(peakids), ms2.names)
ms2[matching_pos, "loss_bin_id"] <- as.character(mean.mz)
# remove losses from the list to process
losses <- losses[-match.idx]
fragment_peakids <- fragment_peakids[-match.idx]
fragment_intensities <- fragment_intensities[-match.idx]
parent_ids <- parent_ids[-match.idx]
} else { # otherwise just insert a row of all NAs
row <- rep(NA, nrow(ms1))
existing_loss_df <- rbind(existing_loss_df, row)
rownames(existing_loss_df)[nrow(existing_loss_df)] <- paste(c("loss_", mean.mz), collapse="")
}
} else { # otherwise just insert a row of all NAs
row <- rep(NA, nrow(ms1))
existing_loss_df <- rbind(existing_loss_df, row)
rownames(existing_loss_df)[nrow(existing_loss_df)] <- paste(c("loss_", mean.mz), collapse="")
}
}
}
print("Constructing neutral loss dataframe")
# create an empty dataframe for existing words
existing_loss_df <- data.frame(t(rep(NA,length(ms1$peakID))))
existing_loss_df <- existing_loss_df[-1,] # remove first column
# create an empty dataframe for new words
new_loss_df <- data.frame(t(rep(NA,length(ms1$peakID))))
new_loss_df <- new_loss_df[-1,] # remove first column
ms1.names <- as.character(ms1$peakID) # set row names on ms1 dataframe
ms2.names <- as.character(ms2$peakID) # set row names on ms2 dataframe
# compute the difference between each fragment peak to its parent
ms2_masses <- ms2$mz
parent_ids <- ms2$MSnParentPeakID
matches <- match(as.character(parent_ids), ms1.names)
parent_masses <- ms1[matches, 5] # column 5 is the mz
losses <- parent_masses - ms2_masses
fragment_intensities <- ms2$intensity
fragment_peakids <- ms2$peakID
# reuse existing words, if any
if (file.exists(prev_words_file)) {
# select the rows containing 'loss' and make it into a vector for strsplit
prev_words <- read.csv(prev_words_file, header=F)
pos <-with(prev_words, grepl("loss", V1))
prev_words <- as.vector(prev_words[pos, 1])
# split by _
tokens <- strsplit(prev_words, '_')
prev_mzs <- sapply(tokens, '[', 2)
prev_mzs <- as.numeric(prev_mzs)
prev_mzs_len <- length(prev_mzs)
for (i in 1:prev_mzs_len) {
mz <- prev_mzs[i]
# calculate mz window
max.ppm <- mz * 15 * 1e-06
# find losses within that window
match.idx <- which(sapply(losses, function(x) {
abs(mz - x) < max.ppm
}))
# use the existing word as label for the rows
mean.mz <- round(mz, digits=5)
# if there's a match then use the actual fragment peaks
if (length(match.idx)>0) {
# find column of the parent peaks
intensities <- fragment_intensities[match.idx]
peakids <- fragment_peakids[match.idx]
parent.id <- parent_ids[match.idx]
parent.idx <- match(as.character(parent.id), ms1.names)
# append this new row to the data frame only if no. of parent.idx > threshold
threshold_counts <- 5
threshold_max_loss <- 200
if (length(parent.idx) >= threshold_counts && mean.mz < threshold_max_loss) {
print(paste(c("i=", i, "/", prev_mzs_len,
", remaining=", length(losses),
" loss=", mean.mz,
" matches=", length(match.idx)), collapse=""))
row <- rep(NA, nrow(ms1))
row[parent.idx] <- intensities
# add new row to existing loss dataframe
existing_loss_df <- rbind(existing_loss_df, row)
rownames(existing_loss_df)[nrow(existing_loss_df)] <- paste(c("loss_", mean.mz), collapse="") # the row name is the avg mz
# store the loss_bin_id in the original ms2 dataframe too
matching_pos <- match(as.character(peakids), ms2.names)
ms2[matching_pos, "loss_bin_id"] <- as.character(mean.mz)
# remove losses from the list to process
losses <- losses[-match.idx]
fragment_peakids <- fragment_peakids[-match.idx]
fragment_intensities <- fragment_intensities[-match.idx]
parent_ids <- parent_ids[-match.idx]
} else { # otherwise just insert a row of all NAs
row <- rep(NA, nrow(ms1))
existing_loss_df <- rbind(existing_loss_df, row)
rownames(existing_loss_df)[nrow(existing_loss_df)] <- paste(c("loss_", mean.mz), collapse="")
}
} else { # otherwise just insert a row of all NAs
row <- rep(NA, nrow(ms1))
existing_loss_df <- rbind(existing_loss_df, row)
rownames(existing_loss_df)[nrow(existing_loss_df)] <- paste(c("loss_", mean.mz), collapse="")
}
}
}
while(length(losses) > 0) {
mz <- losses[1]
# get all the losses values within tolerance from mz
max.ppm <- mz * 15 * 1e-06
match.idx <- which(sapply(losses, function(x) {
abs(mz - x) < max.ppm
}))
# compute their average mean mz as the row label and find column of the parent peaks
mean.mz <- round(mean(losses[match.idx]), digits=5)
intensities <- fragment_intensities[match.idx]
peakids <- fragment_peakids[match.idx]
parent.id <- parent_ids[match.idx]
parent.idx <- match(as.character(parent.id), ms1.names)
# append this new row to the data frame only if no. of parent.idx > threshold
threshold_counts <- 5
threshold_max_loss <- 200
if (length(parent.idx) >= threshold_counts && mean.mz < threshold_max_loss) {
print(paste(c("remaining=", length(losses), " loss=", mean.mz, " matches=", length(match.idx)), collapse=""))
row <- rep(NA, nrow(ms1))
row[parent.idx] <- intensities
new_loss_df <- rbind(new_loss_df, row)
rownames(new_loss_df)[nrow(new_loss_df)] <- paste(c("loss_", mean.mz), collapse="") # the row name is the avg mz
matching_pos <- match(as.character(peakids), ms2.names)
ms2[matching_pos, "loss_bin_id"] <- as.character(mean.mz)
}
# this will always find something
losses <- losses[-match.idx]
fragment_peakids <- fragment_peakids[-match.idx]
fragment_intensities <- fragment_intensities[-match.idx]
parent_ids <- parent_ids[-match.idx]
}
existing_loss_df <- existing_loss_df[mixedsort(row.names(existing_loss_df)),]
names(existing_loss_df) <- paste(as.character(round(ms1$mz, digits=5)),
as.character(ms1$rt),
as.character(ms1$peakID),
sep="_")
new_loss_df <- new_loss_df[mixedsort(row.names(new_loss_df)),]
names(new_loss_df) <- paste(as.character(round(ms1$mz, digits=5)),
as.character(ms1$rt),
as.character(ms1$peakID),
sep="_")
loss_df <- rbind(existing_loss_df, new_loss_df)
View(loss_df)
source('~/git/metabolomics_tools/justin/R/MS1MS2_MatrixGeneration_default_7ppm_specPeaks.R')
source('createPeakList.R')
results <- create_peaklist(peaks, use_relative_intensities)
source('createPeakList.R')
results <- create_peaklist(peaks, use_relative_intensities)
ms1 <- results$ms1
ms2 <- results$ms2
###############################
##### Feature Extractions #####
###############################
source('extractFragmentFeatures.R')
results <- extract_ms2_fragment_df(ms1, ms2, prev_words_file)
fragment_df <- results$fragment_df
ms2 <- results$ms2
source('extractLossFeatures.R')
results <- extract_neutral_loss_df(ms1, ms2, prev_words_file)
neutral_loss_df <- results$neutral_loss_df
ms2 <- results$ms2
source('extractMzdiffFeatures.R')
results <- extract_mzdiff_df(ms1, ms2)
mz_diff_df <- results$mz_diff_df
ms2 <- results$ms2
write.table(ms1, file=ms1_out, col.names=NA, row.names=T, sep=",")
write.table(ms2, file=ms2_out, col.names=NA, row.names=T, sep=",")
write.table(fragment_df, file=fragments_out, col.names=NA, row.names=T, sep=",")
write.table(neutral_loss_df, file=losses_out, col.names=NA, row.names=T, sep=",")
write.table(mz_diff_df, file=mzdiffs_out, col.names=NA, row.names=T, sep=",")
